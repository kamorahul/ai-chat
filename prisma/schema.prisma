// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Setting       Setting[]
    Chat          Chat[]
    Message       Message[]
    Template      Template[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Setting {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    openaiKey String?
    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}

model Chat {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    messages  Message[]
    name      String    @default("New Chat")
    User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}

model Message {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    role      String
    text      String
    position  Int
    chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
    chatId    Int
    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}

model Template {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    prompt    String
    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}
